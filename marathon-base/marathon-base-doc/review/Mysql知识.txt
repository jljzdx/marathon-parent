1、索引
|-类型：
  |--普通索引
  |--唯一索引
  |--全文索引
  |--组合索引
|-分类：
  |--聚集索引：其实就是主键，每张表只能有一个聚集索引
  |--非聚集索引：一张表可以有多个非聚集索引
  |--联合索引（a、b、c做为联合索引）
     |---a,ab,abc最左匹配
     |---where a=3 and c=7（a用到了索引，c没有）
     |---where a=3 and b>7 and c=3（a和b用到了索引，c没有）
     |---group by\order by（1、必须在有where的前提才走索引；2、需要和联合索引顺序一致才会走索引）
         |----group by c1 | order by c1（不走索引）
         |----where c1 = '1' group | order by c2（c1,c2都走索引）
         |----where c1 = '1' group | order by c2,c3（c1,c2,c3都走索引）
         |----where c1 = '1' group | order by c3,c2（只有c1走索引）
     |---where a=3 order by b（a和b都用到了索引）
     |---where b=3 order by a（a和b都没有用到索引）
  |--覆盖索引：
     |---就是查询的字段都是索引，如下name,age
     |---select name,age where name>'wang'，index(name,age)
|-几种数据结构：
  |--算法工具：https://www.cs.usfca.edu/~galles/visualization/Algorithms.html
  |--哈希表：不支持范围查询
  |--平衡二叉树：虽然支持范围查询，但效率比较低；磁盘IO次数多；插入需要做旋转
  |--BTree：不是二叉树，是一种树状数据结构，减少了平衡二叉树的高度，也就是磁盘IO;虽然支持范围查询，但效率比较低；
  |--B+Tree：
     |---B+Tree是从最早的平衡二叉树演化而来，也是BTree的升级版，但是B+Tree不是一个二叉树
     |---B+Tree解决了BTree范围查询效率低的问题，因为叶子节点使用了有序双向链表连接。
     |---B+Tree分为聚集索引和非聚集索引
     |---非叶子节点只包含key（也就是索引的值），叶子节点包含key和value（key=索引的值；value=一个地址指针或行数据）
     |---缺点：在叶子节点冗余了非叶子节点的数据，比较占用硬盘空间
|-为什么不使用hash、二叉树、BTree，而采用B+Tree？
  |--1、磁盘IO次数更少2、叶子节点形成有序链表，执行范围操作效率高（where id<6）
|-Myisam（非聚集索引）原理：
  |--创建表就会生成这3个文件：user.MYI 索引文件、user.MYD 数据文件、user.frm 创建表语句，所以叫非聚集索引
  |--select * from user where id = 1的执行流程：
  1、查看该表的myi文件有没有以id为索引的索引树。
  2、根据这个id索引找到叶子节点的id值，从而得到它里面的数据地址。(叶子节点存的是索引和数据地址)。
  3、根据数据地址去myd文件里面找到对应的数据返回出来。
|-Innodb（聚集索引）：
  |--创建表就会生成这2个文件：user.ibd 索引文件、user.frm 创建表语句，所以叫聚集索引
  |--创建一个以name为索引，select * from user where name = '吴磊'的执行流程：
  1、找到name索引树。
  2、根据name的值找到该树下叶子的name索引和主键值。
  3、用主键值去主键索引树的叶子节点找到该条数据信息。
|-为什么Mysql在建表时必须指定主键？
  |--当然，不建也可以，这样mysql底层会帮我们维护一个主键，性能下降
  |--看图InnoDB索引原理.png
  |--因为在创建表时，InnoDB就会主动建立好主键ID索引树

2、MyISAM（非聚集索引） 和 InnoDB（聚集索引）的区别：
|-事务：InnoDB支持事务，MyISAM不支持事务
|-外键：InnoDB支持外键，MyISAM不支持外键
|-锁机制：InnoDB是行锁，MyISAM是表锁
|-都是使用了B+Tree数据结构，但是叶子节点不同，InnoDB叶子节点的value存放的是行数据，MyISAM叶子节点的value存放的是指针，指向具体的行数据

3、mysql优化：
|-数据库结构优化：表设计（索引、冗余、给默认值）
  |--最常见的就是加索引，及注意事项：
     |---主要根据查询条件，单列索引尽量选择基本数据类型，像datetime类型的不如建组合索引效果更好，有时候组合索引比单列索引性能好
     |---表记录太少不需要加索引
     |---经常增删改不需要加索引
     |---查询条件特别多的不建议把所有字段加索引，可以先通过其中某个字段查询，让记录减少，再通过其他字段查询
     |---如果根据多列排序，尽量创建组合索引
  |--数据量大的时候尽量单表查询，不要做关联查询，这样就需要表结构设计需要适当的冗余字段
  |--字段值尽量不要null值，可以设置默认值，避免null判断
|-架构优化：高可用（Mycat）、读写分离（一主多从，主写从读）、分库分表（按一定规则存放，查询时也按此规则查询哪个库表）
|-服务器硬件优化：没有去研究
|-sql语句优化：
  |--使用explain查看执行情况
  |--避免索引失效：
     |---or
     |---like '%a'【可以使用覆盖索引来解决】
     |---函数操作
     |---表达式操作（where num/2=100）
     |---!=或<>
     |---in或not in
     |---is null或is not null
     |---类型转换：where name=123
  |--不要使用select *
  |--如果明知道结果只返回一条记录，后面最好加上limit 1
  |--表沒有主键(Primary key), 那么count(1)比count(*)快，有主键的話，那主键作为count的条件时候count(主键)最快
  |--避免在 where 子句中使用 !=或<> 操作符、in 和 not in 也要慎用（exists 代替）


4、事务
特性：
|-原子性：要么全部执行成功，要么全部失败
|-一致性：一个事务执行之前和执行之后都必须处于一致性状态
|-隔离性：多个并发事务之间是相互隔离的
|-持久性：一个事务一旦被提交了，数据的改变是永久性的
隔离级别：
|-Read uncommitted (读未提交)：
  |--可以读到未提交的数据
  |--脏读：事务A读取了事务B更新的数据，然后B回滚操作
|-Read committed (读已提交)：
  |--只能读到已经提交了的数据
  |--不可重复读：事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果 不一致。
|-Repeatable read (可重复读)：
  |--在一个事务内，多次读同一个数据，在这个事务还没结束时，其他事务不能更新该数据
  |--幻读：主要是因为插入或删除才产生的。管理员A批量更新所有数据，管理员B添加一条数据，A查询发现还有一条没有更新，产生了幻觉。
|-Serializable (串行化)：
  |--要求事务序列化执行，事务只能一个接着一个地执行，但不能并发执行
7种事务传播行为：
|-PROPAGATION_REQUIRED：如果存在一个事务，则支持当前事务。如果没有事务则开启一个新的事务。
|-PROPAGATION_SUPPORTS：表示当前方法不需要事务，但如果存在当前事务的话，那么该方法会在这个事务中运行。
|-PROPAGATION_MANDATORY：表示该方法必须在事务中运行，否则抛出异常。
|-PROPAGATION_REQUIRES_NEW：表示该方法必须运行在自己的事务中。一个新的事务将被启动，如果存在当前事务，在该方法执行期间，当前事务被挂起。
|-PROPAGATION_NOT_SUPPORTED：表示该方法不应该运行在事务中，如果存在当前事务，在该方法运行期间，当前事务将被挂起。
|-PROPAGATION_NEVER：表示该方法不应该运行在事务上下文中，如果存在当前事务在运行会抛异常。
|-PROPAGATION_NESTED：表示如果当前已经存在一个事务，那么该方法将会在嵌套事务中运行，嵌套的事务可以独立于当前事务进行单独提交回滚；
                      如果当前事务不存在，则跟PROPAGATION_REQUIRED一样。

5、主从复制:
|-原理：A：master；B：slave
create/insert/delete/update ->A(这个时候会将sql语句写入到二进制文件binlog中) ->A开启一个logDump线程把本地binlog二进制文件传给B ->
B会开启一个IO线程长链接到A获取binlog文件 ->B还会再开启一个sql线程用来执行刚才拿到的binlog二进制文件 ->这样就达到了主从复制
|-步骤：
【master】修改my.cnf文件，添加两行
server_id = 177
log-bin = mysql-bin
验证是否成功：
service mysqld restart
show variables like '%server_id%'
show master status

【slave】修改my.cnf文件，添加两行
server_id=178
log-bin=mysql-bin
binlog_do_db=test1,test2 #需要同步的数据库
验证是否成功：
service mysqld restart
show variables like '%server_id%'
从服务器同步主服务器配置:
change master to master_host='192.168.212.177',master_user='root',master_password='admin',master_log_file='mysql-bin.000002',master_log_pos=216;
开始同步：
start slave
检查从服务器复制功能状态：
show slave status

数据库集群产生的问题：
|-自增id重复问题
  |--UUID（Mysql不推荐使用，Oracle可以使用）
  |--设置数据库步长（缺点：需要确定好集群数量）
     |---修改自增步长：set @@auto_increment_increment = 2;
     |---修改起始值：set @@auto_increment_offset = 1;
|-关联表查询问题
|-数据同步问题
|-垂直拆分（分库）
  |--跨数据库查询、产生分布式事务
|-水平拆分（分表）
  |--
|-Mycat
|-sharding-jdbc（当当网开源框架）

1,2,3
4,5,6
7,8,9

6、连接池
|-原本我们是通过JDBC进行连接的，但是每次创建一次连接太昂贵了，所以使用连接池

7、Mysql锁
|-行锁：开销大；加锁慢；会出现死锁；但处理并发的能力强
|-表锁：开销小；加锁快；无死锁；并发处理能力低，偏向MyISAM存储引擎
|-共享锁：允许事务读一行数据
|-排他锁：允许事务删除或更新一行数据
|-死锁情况（肯定涉及两条数据，但不一定两条sql语句，因为一条sql语句可能锁多行）：
  |--sessionA：
    --T1时刻
    BEGIN;
    --行级锁 id=1 的记录
    select * from test1 where id=1 for update ;
    --T3时刻
    --更新 id=2 的记录
    update test1 set id=id where id=2;

  |--sessionB：
    --T2时刻
    BEGIN;
    --行级锁 id=2 的记录
    select * from test1 where id=2 for update ;
    --T4时刻
    --更新 id=1 的记录
    update test1 set id=id where id=1;
8、百万数据分页优化
|-利用覆盖索引+复合索引
SELECT * FROM product a JOIN (select id from product limit 866613, 20) b ON a.ID = b.id
9、explain
|-select_type
  |--primary：包含子查询的sql中的主查询，最外层
  |--subquery：包含子查询的sql中的子查询
  |--simple：简单查询。不包含自查询和union
  |--derived：衍生查询。用到了临时表，比如：
     |---在from子查询中只有一张表
     |---在from子查询中，如果table1 union table2，则table1就是derived，table2就是union
|-type
  |--性能：system>const>eq_ref>ref>range>index>all
  |--提示：system、const的性能是最好的，但是在实际开发中很难达到，能优化到ref和range就可以了
  |--system：只有一条数据的系统表；或衍生表只有一条数据的主查询
  |--const：仅仅能查出一条数据的sql，并且查询条件是primary key或unique
  |--eq_ref：根据某个索引（如：name）条件查询的结果，不能有重复的，并且查出来不能0条数据，常见的比如：根据主键和唯一索引查询就能达到。
             当两个表关联查询，想达到eq_ref，两个表的数据必须一样多，也就是一一对应，所以也很难达到
  |--ref：根据某个索引（如：name）条件查询就行
  |--range：根据某个索引查询指定范围的行（between、in、>、<、>=）
            注意：in有时候可以，有时候不行（就是all），比较特殊
  |--index：查询全部索引中的数据
            比如：select id from teacher;就是只扫描id这一列，并且id是索引
  |--all：查询全部表中的数据
            比如：select name from teacher;name不是索引，所以全表扫描
|-possible_keys：可能用到的索引，是一种预测，可能不准
|-key：实际使用到的索引
|-key_len：索引长度，通常用于判断复合索引是否被完全使用，utf-8一个字符占3个字节，如果字段允许为null，会+1
|-ref：
  |--select * from course c, teacher t where c.tid=t.tid and name='tx';
  |--const：因为name='tx'是常量
  |--myDB.t.tid：也就是说，c表的tid使用到了t表的tid
|-raws：扫描的行数
|-Extra
  |--using filesort：代表额外进行了一次排序，耗性能，所以一般建议，where哪些字段，就order by哪些字段
  select * from teacher where a1='zhang' order by a2;
  |--using temporary：代表额外使用了临时表，经常出现在group by语句中。所以一般建议，查询哪些字段，就group by哪些字段
  select a1 from teacher group by a2
  |--using index：使用到了索引，性能好了
  |--using where：回到了原表查
  select age,name from teacher where age=3;【age是索引列，name不是】
  因为age直接查索引表B+Tree，但是name不是索引列，需要回到原表查