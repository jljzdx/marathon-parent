1、SpringBoot自动配置原理：
|-首先从@SpringBootApplication开始，到@EnableAutoConfiguration,再到@Import(AutoConfigurationImportSelector.class)
|-AutoConfigurationImportSelector的selectImports()方法通过SpringFactoriesLoader.loadFactoryNames()扫描所有具有META-INF/spring.factories的jar包
|-spring-boot-autoconfigure-x.x.x.x.jar里就有一个这样的spring.factories文件，key是EnableAutoConfiguration类的全类名，value是一个xxxxAutoConfiguration的类名的列表。
|-SpringApplication.run(...)的内部就会执行selectImports()方法，找到所有JavaConfig自动配置类的全限定名对应的class，然后将所有自动配置类加载到Spring容器中
|-每一个XxxxAutoConfiguration自动配置类都是在某些条件之下才会生效的，所以使用条件注解
  |--@ConditionalOnBean：当容器里有指定的bean的条件下
  |--@ConditionalOnMissingBean：当容器里不存在指定bean的条件下
  |--@ConditionalOnClass：当类路径下有指定类的条件下
  |--@ConditionalOnMissingClass：当类路径下不存在指定类的条件下
  |--@ConditionalOnProperty：指定的属性是否有指定的值，比如@ConditionalOnProperties(prefix=”xxx.xxx”, value=”enable”, matchIfMissing=true)，代表当xxx.xxx为enable时条件的布尔值为true，如果没有设置的情况下也为true
|-如何自定义Starter？
  |--1、创建自定义starter工程，并引入maven依赖
  注意命名规则：<artifactId>xxx-spring-boot-starter</artifactId>
  <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-autoconfigure</artifactId>
      <version>2.0.0.RELEASE</version>
  </dependency>
  <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-configuration-processor</artifactId>
      <version>2.0.0.RELEASE</version>
      <optional>true</optional>
  </dependency>
  |--application.yml
  spring:
    person:
      name: 王
      age: 55
      salary: 10000
  |--2、配置属性类
  @ConfigurationProperties(prefix = "spring.person")
  public class PersonProperties {
      private String name;
      private int age;
      private double salary;
      // set/get 省略
  }
  |--3、定义核心服务类，该类主要定义了 starter 的核心功能
  public class PersonService {

      private PersonProperties properties;

      public PersonService() {
      }

      public PersonService(PersonProperties properties) {
          this.properties = properties;
      }

      public void sayHello(){
          System.out.println("大家好，我叫: " + properties.getName() + ", 今年" + properties.getAge() + "岁"
              + ", 性别: " + properties.getSex());
      }
  }
  |--4、自定义自动配置类
  @Configuration
  @ConditionalOnClass(PersonService.class)
  @ConditionalOnProperty(prefix = "spring.person", value = "enabled", matchIfMissing = true)
  @EnableConfigurationProperties(PersonProperties.class)
  public class PersonServiceAutoConfiguration {

      @Autowired
      private PersonProperties properties;

      @Bean
      @ConditionalOnMissingBean(PersonService.class)  // 当容器中没有指定Bean的情况下，自动配置PersonService类
      public PersonService personService(){
          PersonService personService = new PersonService(properties);
          return personService;
      }
  }
  |--5、src/main/resources/META-INF/spring.factories
  org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.mengday.helloworld.PersonServiceAutoConfiguration
2、SpringCloud:
|-微服务几个概念：
  |--什么叫微服务：微服务只是的 SOA 升华，将系统业务按照功能拆分为更细粒度的服务，每个服务都是一个独立的应用，这些应用对外提供公共的API，并以Http Rest Json方式调用。
  |--服务降级：在高并发情况下，为了防止用户一直等待，直接给用户返回一个友好的提示
  |--服务熔断：熔断机制是为了保护服务，在高并发情况下，如果流量超出设定的阈值，直接拒绝访问服务接口，然后和服务降级一起使用的
     |---首先熔断器处于关闭状态，所有请求都能正常访问，但是熔断器会统计最近一定数量的请求的失败比例（失败比例=请求失败数/请求总数），如果超过设定阈值（比如：50%），
         熔断器打开，所有请求都不能访问，做好降级操作，经过一段时间后，断路器会进入半开状态，这是只允许一个请求通过，如果该请求成功，则断路器关闭，反之，断路器打开
     |---出错百分比阈值，当达到此阈值后，开始短路。默认50%，hystrix.command.default.circuitBreaker.errorThresholdPercentage=50%
     |---短路多久以后开始尝试是否恢复，默认5s，hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds=5
     |---当在配置时间窗口内达到此数量的失败后，进行短路，默认20个，hystrix.command.default.circuitBreaker.requestVolumeThreshold=20
     |---服务的返回时间大于ribbon的超时时间，会触发重试，默认=1000ms，hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=60000
  |--雪崩效应：由于默认情况下，只有一个线程池维护所有的服务接口，如果流量达到tomcat线程池默认的极限，可能导致服务无法访问
  |--服务隔离：保证每个服务接口互不影响。用来解决雪崩的，有两种方式【线程池、信号量】
     |---信号量隔离：信号量的调用是同步的，其实是一个计数器，当信号大于了最大请求数（maxConcurrentRequests）时，进行限制，调用fallback接口快速返回
  |--雪崩效应解决：
     |---通过Hystrix的服务降级【为了用户体验，fallback使用异步线程callable和future返回结果】
     |---服务熔断机制【为了保护服务，如果流量超出设置的默认的阈值10，自动开启保护服务功能，和降级一起使用】
     |---服务隔离【线程池隔离：使用@HystrixCommand会另外开启一个线程池】，注意走降级超时时间，默认是1秒
  |--限流：
    |---计数器算法：1分钟的访问次数不能超过100个，但会出现临界点同时出现200个请求。
    |---滑动窗口计数器：假如限制每60秒只能接收10请求，超过就降级，可以防止在临界点同时出现20个请求。
    |---漏桶算法
    |---令牌桶算法【RateLimiter是guava提供的】：开启一个线程固定速率往桶中存令牌，客户端请求时向桶中取令牌，桶是有固定容量的
  |--几个重要超时时间
     |---一般hystrix的超时时间>ribbon的超时时间
     |---ribbon几个参数
         |----MaxAutoRetries: 1 #最大重试次数，当Eureka中可以找到服务，但是服务连不上时将会重试
         |----MaxAutoRetriesNextServer: 1 #切换实例的重试次数
         |----OkToRetryOnAllOperations: true # 当设置为false时，只会对get请求进行重试，如果是post,put等操作没有实现幂等的情况下是很危险的
         |----ConnectTimeout: 250 #请求连接的超时时间
         |----ReadTimeout: 1000 #请求处理的超时时间
         |----重试次数的计算：MaxAutoRetries+MaxAutoRetriesNextServer+(MaxAutoRetries *MaxAutoRetriesNextServer)
     |---hystrix超时时间的计算公式：ReadTimeout+（MaxAutoRetries * ReadTimeout），如果有配置MaxAutoRetriesNextServer这个属性，则计算公式如下：
         如果MaxAutoRetriesNextServer=1，就加1个：ReadTimeout+（MaxAutoRetries * ReadTimeout）+ ReadTimeout+（MaxAutoRetries * ReadTimeout）= 4000ms
         如果MaxAutoRetriesNextServer=2，就加2个：ReadTimeout+（MaxAutoRetries * ReadTimeout）+ ReadTimeout+（MaxAutoRetries * ReadTimeout）+ ReadTimeout+（MaxAutoRetries * ReadTimeout）= 6000ms
|-Feign
  |--解决了什么问题：封装了Http调用流程，更适合面向接口化的编程习惯
  |--Feign的相关配置在spring-cloud-openfeign-core.jar->META-INF->spring-configuration-metadata.json
  |--readTimeOut默认是60秒，为什么还会超时呢？因为hystrix默认是1秒，可以直接配置feign.client.config.default.readTimeout: 10000
  |--原理：
     |---LoadBalancerFeignClient->execute
     |---在微服务启动时，Feign会进行包扫描，对于加@FeignClient注解的接口，Feign就会针对这个接口创建一个JDK动态代理类
     |---动态代理的作用：对http请求进行封装、处理响应结果并解码后返回给调用者
  |--重试机制：默认5次（打开Retryer类就知道了），建议关闭重试机制，下面配置用来关闭重试机制，直接抛出异常;
     Ribbon的重试机制只有对GET请求或者设置了OkToRetryOnAllOperations才生效（可看源码RibbonLoadBalancedRetryPolicy->canRetry）。
  @Configuration
  public class FeignConfig {
      @Bean
      Retryer feignRetryer() {
          //这样也可以：return Retryer.NEVER_RETRY;
          return new Retryer() {
              @Override
              //在这里重写 continueOrPropagate算法，可自定义处理方式。这里直接抛出异常，相当于不重试。
              public void continueOrPropagate(RetryableException e) {
                  throw e;
              }
              @Override
              public Retryer clone() {
                  return this;
              }
          };
      }
  }
  |--客户端实现类（Feign最终发送Request请求以及接收Response响应都是由它来完成的）
     |---HttpURLConnection（默认，缺乏连接池的支持，在达到一定流量的后服务肯定会出问题）
     |---ApacheHttpClient
     <dependency>
         <groupId>io.github.openfeign</groupId>
         <artifactId>feign-httpclient</artifactId>
         <version>9.4.0</version>
     </dependency>
     ---------------------------------
     feign.httpclient.enabled=true
     |---OkHttp
     <dependency>
         <groupId>io.github.openfeign</groupId>
         <artifactId>feign-okhttp</artifactId>
         <version>10.2.0</version>
     </dependency>
  |--源码
  |--Feign集成Ribbon负载均衡原理
     |---原理：在RestTemplate进行http请求时，这个请求就会被拦截器拦截，然后实现负载均衡调用。
         负载均衡的基本实现就是利用applicationName从服务注册中心获取可用的服务地址列表，然后通过一定算法负载，决定使用哪一个服务地址来进行http调用。
     |---LoadBalancerFeignClient
     |---默认使用轮询，可以通过IRule接口自定义
|-getway
  |--与zuul的区别
     |---Gateway是spring旗下spring-cloud的一个子项目；zuul则是netflix公司的项目，目前spring不打算集成zuul2.x
     |---Gateway基于Spring 5.0，Spring Boot 2.0 响应式的、非阻塞式的 API；Zuul构建于 Servlet 2.5，兼容 3.x，使用的是阻塞式的 API，不支持长连接
  |--post请求问题
  |--原理
|-监控中心
  |--spring-boot-admin + security
  <dependency>
      <groupId>de.codecentric</groupId>
      <artifactId>spring-boot-admin-starter-server</artifactId>
  </dependency>
  <dependency>
      <groupId>de.codecentric</groupId>
      <artifactId>spring-boot-admin-server-ui</artifactId>
  </dependency>
  <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
  </dependency>
  |--@EnableAdminServer
|-
4、什么是RPC和SOA
|-RPC：基于socket的形式，通过RPC框架，使得我们可以像调用本地方法一样地调用远程机器上的方法。如：Dubbo、Spring Cloud、gRPC、Thrift
|-SOA：是一种架构设计思想，叫面向服务的架构，也叫服务治理，用来解决服务之间调用的乱七八糟的关系给治理起来，然后提供一个统一的标准。下面举例：
  |--1、小明负责【考勤】，小王负责【薪资】
  |--2、小王说： 小明，我要用【考勤】数据，你做好了没？
  |--3、小明说： 早做好了，表名叫Attenance, 字段A代表员工ID，字段B代表....自己去数据库查。
  |--所有业务模块都柔和在一起，很混乱，所以用SOA：
  |--1、考勤作为单独模块，成为一个考勤服务，发布了一个考勤数据接口（WebServices）
  |--2、小王需要使用考勤数据，调用考勤服务的接口即可
  |--客户端远程调用服务的M方法，需要URL和协议
  |--SOA调用：客户端无需知道URL和协议，而是告诉服务总线，我要调用M方法，服务总线就会找到其对应服务的URL和协议，然后调用M方法。
|-SOAP：http+xml的形式
|-REST：http+json的形式

5、SpringCloud和Dubbo的区别
|-所属机构：SpringCloud是Apache下的Spring体系下的微服务解决方案；Dubbo是阿里系的分布式服务治理框架；
|-调用方式：SpringCloud使用Http的Rest方式（不存在代码耦合，比较灵活）；Dubbo使用RPC进行通讯（服务提供方和调用方之间依赖太强）
|-解决方案：SpringCloud全家桶齐全（配置中心、容错、链路追踪、安全、getway等）；
|-注册中心：SpringCloud使用Eureka、zookeeper、consul;Dubbo使用zookeeper

6、配置中心的好处：统一集中管理、不同环境区分、动态更新

7、微服务产生的困难：
优点：
|-能够使用不同的语言开发
|-松耦合
|-容易理解、修改和维护
|-不会有前端代码
缺点：
|-分布式解决方案
|-测试和运维
|-避免环形依赖与双向依赖
|-服务间通信成本

8、微服务拆分原则
|-高内聚低耦合
|-服务粒度适中
|-以业务模型切入
|-演进式拆分
|-避免环形依赖与双向依赖

9、Eureka、Zookeeper、Consul满足CAP中的哪两个？
|-Eureka：满足AP，因为节点挂了不会像ZK进行leader选举
|-Zookeeper：满足CP，因为leader选举的时间太长，30 ~ 120s, 且选举期间整个zk集群都是不可用的
|-Consul：满足CP
|-Nacos：同时支持AP和CP，根据服务注册选择临时和永久来决定走AP模式还是CP模式

10、SpringBoot拦截器和过滤器实现
|-拦截器
@Component
public class LoginInterceptor implements HandlerInterceptor {
    //进入controller层之前拦截请求
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {}
    //视图渲染之后的操作
    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable ModelAndView modelAndView) throws Exception {}
    //处理请求完成后视图渲染之前的处理操作
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable Exception ex) throws Exception {}
    @Configuration
}

@Configuration
public class WebConfig implements WebMvcConfigurer {
        @Autowired
        private LoginInterceptor loginInterceptor;

        @Override
        public void addInterceptors(InterceptorRegistry registry) {
            registry.addInterceptor(loginInterceptor).addPathPatterns("/**");
        }
    }
|-过滤器
@Order(9)
@WebFilter(urlPatterns = "/api/*",filterName = "Filter2") //Servlet3.0的注解
public class Filter2 implements Filter {
    @Override
    public void init(FilterConfig filterConfig) throws ServletException {}
    @Override
    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)
            throws IOException, ServletException {}
    @Override
    public void destroy() {}
}

11、SpringBoot2多数据源配置
|-通过包路径实现
|-使用AOP拦截判断选择使用哪个数据源
|-直接交由MyCat来处理
