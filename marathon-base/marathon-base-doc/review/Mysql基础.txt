MyISAM 和 InnoDB的区别：
|-事务：InnoDB支持事务，MyISAM不支持事务
|-外键：InnoDB支持外键，MyISAM不支持外键
|-锁机制：InnoDB是行锁，MyISAM是表锁
|-FULLTEXT类型的全文索引：InnoDB不支持，MyISAM支持
|-count(*)：InnoDB没有保存表的总行数，MyISAM保存有表的总行数
|-MyISAM适合：做很多count 的计算、插入不频繁，查询非常频繁、没有事务

mysql优化：
sql语句优化：
1、首先应考虑在 where 及 order by涉及的列上建立索引
2、避免在 where 子句中使用 !=或<> 操作符、对字段进行 null 值判断（设置默认值）、in 和 not in 也要慎用（exists 代替）、
对字段进行表达式操作（where num/2=100）、对字段进行函数操作（where substring(name,1,3)='abc'）
3、避免在 where 子句中使用 or 来连接条件
select id from t where num=10 union all select id from t where num=20
4、select Count (*)和Select Count(1)以及Select Count(column)区别，
表沒有主键(Primary key), 那么count(1)比count(*)快，有主键的話，那主键作为count的条件时候count(主键)最快
5、like避免以%开头（ ‘%aaa’ 不会使用到索引‘aaa%’ 会使用到索引）
6、如果明知道结果只返回一条记录，后面最好加上limit 1
7、使用explain查看执行情况
8、查询数据量大于30%以上，索引会失效
索引分类：
1.普通索引index :加速查找
2.唯一索引
    主键索引：primary key ：加速查找+约束（不为空且唯一）
    唯一索引：unique：加速查找+约束 （唯一）
3.联合索引
    -primary key(id,name):联合主键索引
    -unique(id,name):联合唯一索引
    -index(id,name):联合普通索引
4.全文索引fulltext :用于搜索很长一篇文章的时候，效果最好。
索引类型：Hash、BTree
InnoDB 支持事务，支持行级别锁定，支持 B-tree，不支持 Hash；
MyISAM 不支持事务，支持表级别锁定，支持 B-tree，不支持 Hash；
Memory 不支持事务，支持表级别锁定，支持 B-tree、Hash；
NDB 支持事务，支持行级别锁定，支持 B-tree、Hash；
数据库结构优化：表设计（索引、冗余、给默认值）
架构优化：高可用（Mycat）、读写分离（一主多从，主写从读）、分库分表（按一定规则存放，查询时也按此规则查询哪个库表）
服务器硬件优化：没有去研究


事务隔离级别：
|-Read uncommitted (读未提交)：最低级别，产生脏读。
|-Read committed (读已提交)：可避免脏读的发生，产生不可重复读。
|-Repeatable read (可重复读)：可避免脏读、不可重复读的发生，产生幻读。
|-Serializable (串行化)：可避免脏读、不可重复读、幻读的发生。
|-脏读：一个事务处理过程里读取了另一个未提交的事务中的数据
|-不可重复读、幻读：幻读和不可重复读都是读取了另一条已经提交的事务，所不同的是不可重复读查询的都是同一个数据项，而幻读针对的是一批数据整体
事务传播行为：


主从复制:
|-原理：A：master；B：slave
create/insert/delete/update ->A(这个时候会讲sql语句写入到二进制文件binlog中) ->A开启一个logDump线程把本地binlog二进制文件传给B ->
B会开启一个IO线程长链接到A获取binlog文件 ->B还会再开启一个sql线程用来执行刚才拿到的binlog二进制文件 ->这样就达到了主从复制
|-步骤：
【master】修改my.cnf文件，添加两行
server_id = 177
log-bin = mysql-bin
验证是否成功：
service mysqld restart
show variables like '%server_id%'
show master status

【slave】修改my.cnf文件，添加两行
server_id=178
log-bin=mysql-bin
binlog_do_db=test1,test2 #需要同步的数据库
验证是否成功：
service mysqld restart
show variables like '%server_id%'
从服务器同步主服务器配置:
change master to master_host='192.168.212.177',master_user='root',master_password='admin',master_log_file='mysql-bin.000002',master_log_pos=216;
开始同步：
start slave
检查从服务器复制功能状态：
show slave status

数据库集群产生的问题：
|-自增id重复问题
  |--UUID（Mysql不推荐使用，Oracle可以使用）
  |--设置数据库步长（缺点：需要确定好集群数量）
     |---修改自增步长：set @@auto_increment_increment = 2;
     |---修改起始值：set @@auto_increment_offset = 1;
|-关联表查询问题
|-数据同步问题
|-垂直拆分（分库）
  |--跨数据库查询、产生分布式事务
|-水平拆分（分表）
  |--
|-Mycat
|-sharding-jdbc（当当网开源框架）

1,2,3
4,5,6
7,8,9