
1、swagger-models举例改源码，然后重新打成jar：
|-下载swagger-models-1.5.20.jar、swagger-models-1.5.20-sources.jar、swagger-models-1.5.20.pom.xml
|-解压swagger-models-1.5.20.jar、swagger-models-1.5.20-sources.jar
|-创建一个Maven工程，然后将swagger-models-1.5.20.pom.xml中的内容全部拷贝到pom.xml中的内容全部拷贝到pom
|-把解压后swagger-models-1.5.20-sources.jar中的io整个目录拷贝到项目中的java目录下
|-把解压后swagger-models-1.5.20.jar中的META-INF整个目录拷贝到项目中的resource目录下
|-修改源码
|-mvn clean package -U -Dmaven.test.skip=true

3、RPC原理：
1、Client端请求调用服务
2、Client Stub负责将方法、参数组装成能够进行网络传输的消息体，将消息体对象序列化为二进制
3、Client端通过Socket将消息发送到Server端
4、Server Stub收到消息后进行反序列化解码， 然后调用本地服务
5、本地服务执行并将结果返回给Server Stub
6、Server Stub将结果组装成能够进行网络传输的消息体，将消息体对象序列化为二进制
7、Server端通过Socket将消息发送到Client端
8、Client Stub收到消息后进行反序列化解码， 然后调用本地服务
9、Client端得到最终结果

4、Nginx
|-Consul+Upsync+Nginx实现动态负载均衡【新浪开源的】
|-Nginx应用场景【反向代理、负载均衡、静态服务器】
|-解决防盗链：就是配置在哪个来源的请求才能访问图片
|-防DDOS攻击：例如控制请求次数、同一个ip请求次数
|-keepalived【LVS设计的】:做心跳检测的，可达到故障转移和自动重启服务

5、Linux常用命令:
lsof -i:8088：查看端口是否被占用，不打印任何信息代表没有。
ps -ef|grep java【System Ｖ风格】ps aux|grep java【BSD风格】
查看端口被占用并杀掉：netstat -tunlp|grep 1984,kill -9 2408
ls -al
硬链接和软链接：
|-硬链接是存在同一个文件系统中，以文件副本的形式存在，不允许给目录创建硬链接，inode是一样的
|-软链接却可以跨越不同的文件系统，以路径的形式存在，可以对目录进行链接，inode是不一样的
|-ln命令会保持每一处链接文件的同步性，也就是说，不论你改动了哪一处，其它的文件都会发生相同的变化
|-软链接命令：ln –s 源文件 目标文件
|-硬链接命令：ln 源文件 目标文件
chmod 777 a.txt = chmod a=rwx a.txt
chmod ugo+x a.txt = chmod a+x a.txt
cp -r C /home【C目录中存在多个文件】
wc -clw【c:字节数；l：行数；w：字符数】
grep：全称全局正则表达式打印，强大的文本搜索工具，可以使用正则表达式搜索
cat a.txt
find . -name ‘A*’ -ls【查找当前目录下所有以A开头的文件，并显示详细信息】
who -H【显示当前登录系统的用户】who -m -H【只显示当前用户】who -q【精简模式显示】
history【查看历史执行记录】history 10【查看历史之行记录后10条】!!【执行上一条命令】
df -hl【磁盘使用情况】df -T【列出文件系统类型】
netstat -at【列出所有TCP端口】netstat -au【列出所有UDP端口】
curl ifconfig.me：查看公网IP
环境变量：
|-env【查看所有环境变量】
|-echo $PATH【查看单个环境变量】
|-vim /etc/profile
  export JAVA_HOME=/usr/share/jdk1.6.0_14
  export PATH=$JAVA_HOME/bin:$PATH
查看日志：cat mule.log.?|grep "newFindIpnrSpecialservicerequest request:" | wc -l
查看磁盘使用：df -hl
查看内存进程占用情况：top -u elk
查看内存大小：cat /proc/meminfo | grep MemTotal
查看JVM内存使用情况：jps -l;jmap -heap 进程号

7、maven继承和聚合：
聚合：为了能够使用一条命令就构建多个模块
继承：在构建多个模块的时候，往往会多有模块有相同的依赖
依赖冲突：
1：如果依赖路径的长度不同，则“短路优先”：
A—>B—>C—>D—>E—>X(version 0.0.1)
A—>F—>X(version 0.0.2)
2：依赖路径长度相同情况下，则“先声明优先”：
A—>E—>X(version 0.0.1)
A—>F—>X(version 0.0.2)


助贷项目：
背景【助贷平台主要为有资金周转需求的个人/企业保单持有人提供自主申请贷款的平台，以所持有的保单剩余现金价值作为质押物，经助贷平台审核通过后，将借款申请推送给合作银行，由银行直接放款给借款人】
助贷管理后台：
|-借款管理【借款管理、流程监控】
|-产品渠道配置【金融产品（财险保单、寿险保单、车险保单-存量、车险保单-新单批量）、资金（帮融汇、腾宇华通、苏宁银行）产品、渠道（安邦财险、北京二手车服务公司）产品】
|-资金管理：【服务费结算：当天以及未结算、服务费结算记录：所有】【资金平台服务费、渠道服务费（这里只显示渠道服务费，因为管理后台是给渠道用的）、助贷服务费】
|-客户管理
|-系统管理
助贷录单系统【借款管理、客户管理】
|-流程：新增借款人、查询保单验真、获取授信额度、确认提交
助贷平台网站【签约管理】
|-流程：签约确认->生成三条服务费用信息->保单质押
定时器：定时查询保单质押结果、审核通过后提交资金机构放款审核
进件->上传材料->审核通过就放款成功（放款失败要保单解质押）

验签流程：
	请求示例：
	http://localhost:5001/nlap/ln/credit/callback?interest=50&loanAmt=11000&repayMode=随借随还&loanApr=0.33&loanExpiryDate=20190130&loanId=22222&loanStatus=00&loanValueDate=20190130&rejectReason=资料不全&termTotal=5&timestamp=1548740982726&transferDate=20190201&sign=1A4EC6BB012A93483F8F4DFD09B15316
	对参数排序，然后拼接得到
	String param = "interest=50&loanAmt=11000&loanApr=0.33&loanExpiryDate=20190130&loanId=22222&loanStatus=00&loanValueDate=20190130&rejectReason=资料不全&repayMode=随借随还&termTotal=5&timestamp=1548740982726&transferDate=20190201";
	String sign = MD5(secretkey+param);
	把sign也加到请求参数中得到完整的请求地址：
	http://localhost:5001/nlap/ln/credit/callback?interest=50&loanAmt=11000&repayMode=随借随还&loanApr=0.33&loanExpiryDate=20190130&loanId=22222&loanStatus=00&loanValueDate=20190130&rejectReason=资料不全&termTotal=5&timestamp=1548740982726&transferDate=20190201&sign=1A4EC6BB012A93483F8F4DFD09B15316
	成功返回：
	{"transactionStatus":{"errorCode":"0","replyCode":null,"replyText":null,"memo":null,"appName":"zxfit-nlap-server","duration":0,"success":true}}
	失败返回：
	{"transactionStatus":{"errorCode":"1","replyCode":"2001","replyText":"验签失败","memo":null,"appName":"zxfit-nlap-server","duration":0,"success":false}}
token认证：
用户注册的时候给这个用户随机的产生一个saltCode字段，作为token的密钥和密码的密钥，
登陆接口的时候将用户id做md5作为key，将saltCode作为value存储在redis里，
在网关层鉴权的时候 将前端用户传入的已做md5加密的用户id，作为searchkey用来在redis中查找value 找到以后用来解密传入的token，
解出来以后拿到用户的真实id，并将真实id写入实际业务执行字段，然后转发请求。
就是我们有些接口需要使用到用户的id字段，id字段给到前端是加密后的 需要使用这个方法拿到真实的id





