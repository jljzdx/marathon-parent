1、索引
|-类型：
  |--普通索引
  |--唯一索引
  |--全文索引
  |--组合索引
|-分类：
  |--聚集索引：Innodb（frm、ibd）
  |--非聚集索引：Myisam（frm、myi、myd）
  |--联合索引（a、b、c做为联合索引）
     |---a,ab,abc最左匹配【where c=1 and b=2 and a=3也会走abc三个索引，因为mysql自带优化器】
     |---where a=3 and c=7（a用到了索引，c没有）
     |---where a=3 and b>7 and c=3（a和b用到了索引，c没有，因为当遇到范围查询，就会停止索引向下传递）
     |---group by\order by（1、必须在有where的前提才走索引；2、需要和联合索引顺序一致才会走索引）
         |----group by c1 | order by c1（不走索引）
         |----where c1 = '1' group | order by c2（c1,c2都走索引）
         |----where c1 = '1' group | order by c2,c3（c1,c2,c3都走索引）
         |----where c1 = '1' group | order by c3,c2（只有c1走索引）
     |---where a=3 order by b（a和b都用到了索引）
     |---where b=3 order by a（a和b都没有用到索引）
  |--覆盖索引：
     |---就是查询的字段都是索引，这样就不用回表查询了，如下name,age
     |---select name,age where name>'wang'，index(name,age)
|-几种数据结构：
  |--算法工具：https://www.cs.usfca.edu/~galles/visualization/Algorithms.html
  |--哈希表：范围查询效率极低
  |--二叉树：极端情况下会形成线性链表，导致查询复杂度为N
  |--红黑树：是一种弱平衡二叉树
  |--自平衡二叉树 AVL：虽然支持范围查询，但效率比较低；磁盘IO次数多；插入需要做旋转
  |--BTree：减少了平衡二叉树的高度（因为一个节点存储多个键值和数据），也就是减少磁盘IO;虽然支持范围查询，但效率比较低；
  |--B+Tree：非叶子节点只包含key（也就是索引的值），叶子节点包含key和data（key=索引的值；data=一个地址指针或行数据）。解决了BTree范围查询效率低的问题，因为叶子节点使用了有序双向链表连接。
|-为什么不使用hash、二叉树、BTree，而采用B+Tree？
  |--1、磁盘IO次数更少2、叶子节点形成有序双向链表，执行范围操作效率高
|-Myisam（非聚集索引）原理：
  |--创建表就会生成这3个文件：user.MYI 索引文件、user.MYD 数据文件、user.frm 创建表语句，所以叫非聚集索引
  |--select * from user where id = 1的执行流程：
  1、查看该表的myi文件有没有以id为索引的索引树。
  2、根据这个id索引找到叶子节点的id值，从而得到它里面的数据地址。(叶子节点存的是索引和数据地址)。
  3、根据数据地址去myd文件里面找到对应的数据返回出来。
|-Innodb（聚集索引）：
  |--创建表就会生成这2个文件：user.ibd 索引文件、user.frm 创建表语句，所以叫聚集索引
  |--创建一个以name为索引，select * from user where name = '吴磊'的执行流程：
  1、找到name索引树。
  2、根据name的值找到该树下叶子的name索引和主键值。
  3、用主键值去主键索引树的叶子节点找到该条数据信息。
|-为什么Mysql在建表时必须指定主键？
  |--当然，不建也可以，这样mysql底层会帮我们维护一个主键，性能下降
  |--看图InnoDB索引原理.png
  |--因为在创建表时，InnoDB就会主动建立好主键ID索引树

2、MyISAM（非聚集索引） 和 InnoDB（聚集索引）的区别：
|-事务：InnoDB支持事务，MyISAM不支持事务
|-外键：InnoDB支持外键，MyISAM不支持外键
|-锁机制：InnoDB是行锁，MyISAM是表锁
|-都是使用了B+Tree数据结构，但是叶子节点不同，InnoDB叶子节点的value存放的是行数据，MyISAM叶子节点的value存放的是指针，指向具体的行数据

3、mysql优化：
|-数据库结构优化：表设计（索引、冗余、给默认值）
  |--最常见的就是加索引，及注意事项：
     |---主要根据查询条件，单列索引尽量选择基本数据类型，像datetime类型的不如建组合索引效果更好，有时候组合索引比单列索引性能好
     |---表记录太少不需要加索引
     |---经常增删改不需要加索引
     |---查询条件特别多的不建议把所有字段加索引，可以先通过其中某个字段查询，让记录减少，再通过其他字段查询
     |---如果根据多列排序，尽量创建组合索引
  |--数据量大的时候尽量单表查询，不要做关联查询，这样就需要表结构设计需要适当的冗余字段
  |--字段值尽量不要null值，可以设置默认值，避免null判断，导致索引失效
|-架构优化：高可用（Mycat）、读写分离（一主多从，主写从读）、分库分表（按一定规则存放，查询时也按此规则查询哪个库表）
|-服务器硬件优化：磁盘-固态硬盘、网络-畅通、足够大的带宽、内存足够大
|-sql语句优化：
  |--使用explain查看执行情况
  |--避免索引失效：
     |---or【可以使用union all替代】
     |---like '%a'【可以使用覆盖索引来解决】
     |---不要对索引进行操作：函数操作、计算操作（where num/2=100）、类型转换（name=123）
     |---联合索引尽量不要使用：!=或<>、in或not in、is null或is not null【如果一定要用，放在where最后面】
     |---联合索引<、>、in是概率事件，但是通常结论是：本身索引有效，后面的索引失效
  |--不要使用select *
  |--如果明知道结果只返回一条记录，后面最好加上limit 1
  |--表沒有主键(Primary key), 那么count(1)比count(*)快，有主键的話，那主键作为count的条件时候count(主键)最快
  |--避免在 where 子句中使用 !=或<> 操作符、in 和 not in 也要慎用（exists 代替）
  |--分页：select id,name from table_name limit 866613, 20 改成 select id,name from table_name where id> 866612 limit 20
  |--关联表查询，尽量小表驱动大表（t left join c on t.cid=c.id：t表的数据比较少，left join给左表t.cid加索引，不给c.id加索引）
  |--多使用嵌套子查询
  |--如果主查询数据量比较大，使用IN；如果子查询数据量比较大，使用exist
     |---select * from table where exist/in (子查询)



4、事务
特性：
|-原子性：要么全部执行成功，要么全部失败
|-一致性：一个事务执行之前和执行之后都必须处于一致性状态
|-隔离性：多个并发事务之间是相互隔离的
|-持久性：一个事务一旦被提交了，数据的改变是永久性的
隔离级别：
|-Read uncommitted (读未提交)：
  |--可以读到未提交的数据
  |--脏读：事务A读取了事务B更新的数据，然后B回滚操作
|-Read committed (读已提交)：
  |--只能读到已经提交了的数据
  |--不可重复读：事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果 不一致。
|-Repeatable read (可重复读)：
  |--在一个事务内，多次读同一个数据，在这个事务还没结束时，其他事务不能更新该数据
  |--幻读：主要是因为插入或删除才产生的。管理员A批量更新所有数据，管理员B添加一条数据，A查询发现还有一条没有更新，产生了幻觉。
|-Serializable (串行化)：
  |--要求事务序列化执行，事务只能一个接着一个地执行，但不能并发执行
7种事务传播行为：
|-PROPAGATION_REQUIRED：如果存在一个事务，则支持当前事务。如果没有事务则开启一个新的事务。
|-PROPAGATION_SUPPORTS：表示当前方法不需要事务，但如果存在当前事务的话，那么该方法会在这个事务中运行。
|-PROPAGATION_MANDATORY：表示该方法必须在事务中运行，否则抛出异常。
|-PROPAGATION_REQUIRES_NEW：表示该方法必须运行在自己的事务中。一个新的事务将被启动，如果存在当前事务，在该方法执行期间，当前事务被挂起。
|-PROPAGATION_NOT_SUPPORTED：表示该方法不应该运行在事务中，如果存在当前事务，在该方法运行期间，当前事务将被挂起。
|-PROPAGATION_NEVER：表示该方法不应该运行在事务上下文中，如果存在当前事务在运行会抛异常。
|-PROPAGATION_NESTED：表示如果当前已经存在一个事务，那么该方法将会在嵌套事务中运行，嵌套的事务可以独立于当前事务进行单独提交回滚；
                      如果当前事务不存在，则跟PROPAGATION_REQUIRED一样。

5、主从复制:
|-原理：
  |--当master执行create/insert/delete/update，被写入到binlog
  |--master开启一个binlog dump thread把本地binlog二进制文件传给slave
  |--slave启动并发起长连接到master
  |--slave开启一个I/O线程，读取master过来的binlog内容,并写入到relay log
  |--slave开启一个SQL线程，从relay log里面读取内容，从Exec_Master_Log_Pos位置开始执行读取到的更新事件，将更新内容写入到数据库
|-步骤：
【master】修改my.cnf文件，添加两行
server_id = 177
log-bin = mysql-bin
验证是否成功：
service mysqld restart
show variables like '%server_id%'
show master status

【slave】修改my.cnf文件，添加两行
server_id=178
log-bin=mysql-bin
binlog_do_db=test1,test2 #需要同步的数据库
验证是否成功：
service mysqld restart
show variables like '%server_id%'
从服务器同步主服务器配置:
change master to master_host='192.168.212.177',master_user='root',master_password='admin',master_log_file='mysql-bin.000002',master_log_pos=216;
开始同步：
start slave
检查从服务器复制功能状态：
show slave status

6、锁机制
|-用来解决因资源共享，导致的并发问题。
|-分类：
  |--操作类型：
     |---读锁（共享锁）：对同一条数据，多个读操作可以同事进行
     |---写锁（互斥锁）：如果写操作没有完毕，则无法进行其他的读操作、写操作
  |--操作范围：
     |---表锁：MyISAM，不会死锁
         |----加锁：lock table teacher read/write;
         |----解锁：unlock tables;
         |----查看表锁命令：show open tables;
         |----分析表锁程度：show status like 'table%'【Table_locks_immediate：能够立刻获取到的锁数量，Table_locks_waited：需要等待的表锁数量】
     |---行锁：InnoDB，容易死锁
         |----加锁：通过事务自动加锁
         |----解锁：通过commit、rollback解锁
         |----如果where的索引失效，行锁会升级到表锁：update table set age=3 where name=123;
         |----间隙锁：update table set name='x' where id>1 and id<9;如果没有id=7的数据，会自动给id=7加间隙锁，别的session想插入，会等待
         |----行锁分析：show status like '%innodb_raw_lock%';
     |---页锁：用的比较少
死锁
|-同表
事务A：
select * from table where id=1;
update table set token='a' where id=2
事务B：
select * from table where id=2;
update table set token='a' where id=1
|-不同表
事务A：
select * from table1 where id=1;
update table2 set token='a' where id=2
事务B：
select * from table2 where id=2;
update table1 set token='a' where id=1
|-索引【如果一条SQL语句用到了主键索引，mysql会锁住主键索引；如果一条语句操作了非主键索引，mysql会先锁住非主键索引，再锁定主键索引】
KEY `idx_1` (`user_id`,`item_id`,`status`)
事务A：
udate table set status=1 where user_id=? and item_id=?;
1、由于用到了非主键索引，首先需要获取idx_1上的行级锁
2、紧接着根据主键进行更新，所以需要获取主键上的行级锁；
3、更新完毕后，提交，并释放所有锁。
事务B：
如果在步骤1和2之间突然插入一条语句：
udate table set name=1 where id=? and user_id=?;【先锁住主键索引，然后锁住idx_1】
这样就死锁了
|-gap
INSERT INTO `test_gap_table` VALUES ('1', 'a');
INSERT INTO `test_gap_table` VALUES ('3', 'c');
INSERT INTO `test_gap_table` VALUES ('5', 'd');
INSERT INTO `test_gap_table` VALUES ('7', 'e');
事务A：
update table set index_no='c' where index_no='c';
insert into table(id,index_no) values(8,'e');
事务B：
update table set index_no='e' where index_no='e';
insert into table(id,index_no) values(2,'b');
分析：
因为index_no是非唯一索引，所以执行事务1更新语句时获取了间隙锁，锁定范围是非唯一索引的上下区间，即(a,d)
执行事务2更新语句获取间隙锁，锁定范围为(d, d后面的无穷大)
因为事务1锁定了(a,d)范围，所以事务2 insert操作会等待事务1释放间隙锁
执行事务1 insert语句，恰好插入的数据在事务2锁定的间隙锁范围，这样就导致事务1和事务2循环等待了，死锁发生

7、explain
|-id（编号）
  |--当id相同时，表是从上往下顺序执行
  |--当id不同时，表是id越大越先执行
  |--例子
  EXPLAIN SELECT
  	t.tname,
  	tc.tcdesc
  FROM
  	teacher t,
  	teacher_card tc
  WHERE
  	tc.tcid = t.tcid
  	AND t.tid = ( SELECT c.tid FROM course c WHERE c.cname = 'java' )
|-select_type（查询类型）
  |--primary：包含子查询的sql中的主查询，通常是最外层
  |--subquery：包含子查询的sql中的子查询
  |--simple：简单查询。不包含子查询和union就叫简单查询
  |--derived：衍生查询。用到了临时表，比如：
     |---在from子查询中只有一张表
     |---在from子查询中，如果from (table1 union table2)，则table1就是derived，table2就是union
  |--union：table1 union table2，table2就是union
  |--union result：告诉你哪几个表进行了union查询
  |--例子
  EXPLAIN SELECT
  	cr.cname
  FROM
  	( SELECT * FROM course WHERE tid = 1 UNION SELECT * FROM course WHERE tid = 2 ) cr
|-table（表）
  |--<derived2>：通过衍生表（id=2）查询
  |--<union2,3>：id=2和id=3进行了union查询
|-type（类型）
  |--性能：system>const>eq_ref>ref>range>index>all
  |--提示：system、const的性能是最好的，但是在实际开发中很难达到，能优化到ref和range就可以了
  |--system：只有一条数据的系统表；或衍生表只有一条数据的主查询，基本达不到
  |--const：查询语句只能查出一条数据，并且查询条件是primary key或unique，比如：通过主键id查询
  |--eq_ref：根据某个索引（如：name）条件查询的结果，不能有重复的，并且查出来不能0条数据，常见的比如：根据主键和唯一索引查询就能达到。
             当两个表关联查询，想达到eq_ref，两个表的数据必须一样多，也就是一一对应，所以也很难达到
  |--ref：根据某个索引（如：name）条件查询就行
  |--range：根据某个索引查询指定范围的行（between、in、>、<、>=）
            注意：in有时候可以，有时候不行（就是all），比较特殊
  |--index：查询全部索引中的数据
            比如：select id from teacher;就是只扫描id这一列，并且id是索引
  |--all：查询全部表中的数据
            比如：select name from teacher;name不是索引，所以全表扫描
|-possible_keys（预测用到的索引）
  |--可能用到的索引，是一种预测，可能不准
|-key（实际使用的索引）
  |--实际使用到的索引
|-key_len（实际使用索引的长度）
  |--索引长度，通常用于判断复合索引是否被完全使用，utf-8一个字符占3个字节，如果字段允许为null，会+1，如果是varchar，会+2
|-ref（表之间索引字段的引用关系）
  |--select * from course c, teacher t where c.tid=t.tid and t.name='tx';
  |--const：因为t.name='tx'是常量
  |--myDB.t.tid：也就是说，c表的tid使用到了t表的tid
|-raws：扫描的行数
|-Extra（额外信息）
  |--using filesort：代表额外进行了一次排序，耗性能，所以一般建议，where哪些字段，就order by哪些字段
  select * from teacher where a1='zhang' order by a2;
  对比（a1,a2,a3,a4是联合索引）：
  select * from test where a1=1 and a2=2 and a4=4 order by a3【不会filesort】
  select * from test where a1=1 and a4=4 order by a2,a3【不会filesort】
  select * from test where a1=1 and a4=4 order by a3【产生filesort】
  |--using temporary：代表额外使用了临时表，耗性能，经常出现在group by语句中。所以一般建议，查询哪些字段，where哪些字段，就group by哪些字段
  sql解析过程：from->on->join->where->group by->having->select->distinct->order by->limit
  select a1 from teacher group by a2
  |--using index：使用到了覆盖索引，性能提升了【这个会影响到possible_keys和key；当查询没有where，只有key有值，当查询有where，两个都有值】
  select name from teacher where name='' and type=''（name和type是联合索引）
  |--using where：回到了原表查
  select age,name from teacher where age=3;【age是索引列，name不是】
  因为age直接查索引表B+Tree，但是name不是索引列，需要回到原表查
  |--using join buffer：关联表查询的sql写得太差了，mysql底层使用了连接缓存

8、其他
|-慢查询SQL日志：
  |--开启慢查询开关：show variables like '%slow_query_log%'; set global slow_query_log=1;
  |--设置慢查询日志文件位置：show variables like '%slow_query_log_file%'; set global slow_query_log='/var/lib/mysql/localhost-slow.log';
  |--设置慢查询临界时间：show variables like '%long_query_time%'; set global long_query_time=5;【这个设置完要重新登录才能生效】
  |--测试：select sleep(4); -> show global status like '%slow_queries%';
  |--这个只能显示条数，具体哪条sql慢，要看文件：cat /var/lib/mysql/localhost-slow.log。或者使用mysqldumpslow命令查看
|-分析海量数据：
  |--show profiles;
  |--如果没有开启：show variables like '%profiling%'; set profiling on;
  |--show profiles;只会展示每条sql语句的执行时间。但不精确，只能看到总共消费的时间，不能看到各个硬件消费的时间。
  |--可以根据查到的Query_ID再查一下：show profile all for query 2;