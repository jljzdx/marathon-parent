1、过滤器
|-针对于单个路由的GatewayFilter【需要通过spring.cloud.routes.filters 配置在具体路由下，只作用在当前路由上】
  |--Spring Cloud Gateway内置了19种强大的过滤器工厂，能够满足很多场景的需求
  |--自定义过滤器
     |---implements GatewayFilter, Ordered
     |---extends AbstractGatewayFilterFactory<RequestTimeGatewayFilterFactory.Config>
|-针对于所有路由的GlobalFilter【全局过滤器，不需要在配置文件中配置，作用在所有的路由上】
  |--Spring Cloud Gateway内置了6种全局过滤器
  |--自定义过滤器【例子看TokenGlobalFilter】
2、限流
|-常见的限流算法
  |--计数器算法：限制一秒钟的能够通过的请求数
     |---弊端：如果我在单位时间1s内的前10ms，已经通过了100个请求，那后面的990ms，只能眼巴巴的把请求拒绝，我们把这种现象称为“突刺现象”
  |--漏桶算法：每10毫秒处理一次请求，可能突然进来很多请求，没来得及处理的请求就先放在桶里。当桶满了，那么新进来的请求就丢弃。
     |---优点：解决了计数器算法的弊端。
     |---弊端：无法应对短时间的突发流量。
  |--令牌桶算法：
|-默认实现Redis限流，扩展只需要实现Ratelimter接口即可，同时也可以通过自定义KeyResolver来指定限流的Key,比如我们需要根据用户、IP、URI来做限流等
3、动态路由
4、容错【路由未定义、Hystrix】
|-路由未定义
spring:
  cloud:
    gateway:
      routes:
      - id: not-found-route
        uri: forward:/not/found/route
        order: 100
        predicates:
        - Path=/**
|-熔断器Hystrix
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
</dependency>
spring:
  cloud:
    gateway:
      default-filters:
      - name: Hystrix
        args:
          name: fallbackcmd
          fallbackUri: forward:/hystrix/fallback
5、鉴权
6、日志
7、路由匹配规则
|-通过 Host 匹配
spring:
  cloud:
    gateway:
      routes:
      - id: host_route
        uri: http://ityouknow.com
        predicates:
        - Host=**.ityouknow.com
curl http://localhost:8080  -H "Host: md.ityouknow.com"
|-通过时间匹配【After、Before、Between】
spring:
  cloud:
    gateway:
      routes:
       - id: time_route
        uri: http://ityouknow.com
        predicates:
         - After=2018-01-20T06:06:06+08:00[Asia/Shanghai]
|-通过 Cookie 匹配
spring:
  cloud:
    gateway:
      routes:
         - id: cookie_route
              uri: http://ityouknow.com
              predicates:
              - Cookie=ityouknow, kee.e
curl http://localhost:8080 --cookie "ityouknow=kee.e"
|-通过 Header 属性匹配
spring:
  cloud:
    gateway:
      routes:
      - id: header_route
        uri: http://ityouknow.com
        predicates:
        - Header=X-Request-Id, \d+
curl http://localhost:8080  -H "X-Request-Id:666666"
|-通过请求方式匹配
spring:
  cloud:
    gateway:
      routes:
      - id: method_route
        uri: http://ityouknow.com
        predicates:
        - Method=GET
curl http://localhost:8080  #curl 默认是以 GET 的方式去请求
curl -X POST http://localhost:8080  #报404
|-通过请求路径匹配
spring:
  cloud:
    gateway:
      routes:
      - id: host_route
        uri: http://ityouknow.com
        predicates:
        - Path=/foo/{segment}
curl http://localhost:8080/foo/1
curl http://localhost:8080/foo/xx
curl http://localhost:8080/boo/xx  #报404
|-通过请求参数匹配
spring:
  cloud:
    gateway:
      routes:
      - id: query_route
        uri: http://ityouknow.com
        predicates:
        - Query=smile
curl localhost:8080?smile=x&id=2
spring:
  cloud:
    gateway:
      routes:
      - id: query_route
        uri: http://ityouknow.com
        predicates:
        - Query=keep, pu.
curl localhost:8080?keep=pub  #当请求中包含 keep 属性并且参数值是以 pu 开头的长度为三位的字符串才会进行匹配和路由
|-通过请求 ip 地址进行匹配
spring:
  cloud:
    gateway:
      routes:
      - id: remoteaddr_route
        uri: http://ityouknow.com
        predicates:
        - RemoteAddr=192.168.1.1/24
curl localhost:8080
|-组合使用
spring:
  cloud:
    gateway:
      routes:
       - id: host_foo_path_headers_to_httpbin
        uri: http://ityouknow.com
        predicates:
        - Host=**.foo.org
        - Path=/headers
        - Method=GET
        - Header=X-Request-Id, \d+
        - Query=foo, ba.
        - Query=baz
        - Cookie=chocolate, ch.p
        - After=2018-01-20T06:06:06+08:00[Asia/Shanghai]





