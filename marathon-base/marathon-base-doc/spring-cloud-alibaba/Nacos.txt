1、安装
官网下载：https://nacos.io/zh-cn/docs/what-is-nacos.html
启动：sh startup.sh -m standalone【如果不带参数，就是集群模式】
访问：http://127.0.0.1:8848/nacos/
默认用户名/密码：nacos/nacos
2、RestTemplate和WebClient比较
RestTemplate 采用 Java Servlet API，因而是阻塞式同步调用。相反，WebClient 是异步的，等待响应的同时不会阻塞正在执行的线程。
只有在响应结果准备就绪时，才会发起通知。
3、Nacos两个依赖
实现服务的注册与发现：spring-cloud-starter-alibaba-nacos-discovery
实现配置的动态变更：spring-cloud-starter-alibaba-nacos-config
4、dataId的完整格式如下：
${prefix}-${spring.profile.active}.${file-extension}
prefix 默认为spring.application.name的值，也可以通过配置项spring.cloud.nacos.config.prefix来配置。
file-exetension为配置内容的数据格式，可以通过配置项spring.cloud.nacos.config.file-extension来配置。目前只支持properties和yaml类型。
5、配置中心
|-引入依赖
<dependency>
    <groupId>com.alibaba.cloud</groupId>
    <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
</dependency>
|-配置
spring:
  cloud:
    nacos:
      config:
        server-addr: 127.0.0.1:8848
        file-extension: yaml
        namespace: 0e4e7c74-9b28-40ac-a604-47b902b64aee
        group: DEV_GROUP
        prefix: example
      discovery:
        server-addr: 127.0.0.1:8848
|-测试
@RestController
@RefreshScope
public class ConfigController {
    @Value("${env:unknow}")
    private String env;

    @GetMapping("/test/config")
    public String testConfig(){
        return env;
    }
}
|-默认加载(服务名.yaml)；当指定prefix=example时，加载example.yaml
|-注意：对于指定环境的配置（spring.profiles.active=DEV、spring.cloud.nacos.config.group=DEV_GROUP、
  spring.cloud.nacos.config.namespace=83eed625-d166-4619-b923-93df2088883a），
  都不要配置在应用的bootstrap.properties中。而是在发布脚本的启动命令中，用-Dspring.profiles.active=DEV的方式来动态指定，会更加灵活！。
|-加载共享配置
6、持久化配置
|-导入%nacos_home%/conf/nacos-mysql.sql
|-修改%nacos_home%/conf/application.properties
spring.datasource.platform=mysql
db.num=1
db.url.0=jdbc:mysql://localhost:3306/nacos?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true
db.user=root
db.password=root
|-问题：启动报错连不上mysql
  |--下载源码
  |--把pom.xml中的mysql-connector-java版本换成自己合适的，代码有些包找不到报错，重新引一下就好了
  |--打包:mvn -Prelease-nacos -Dmaven.test.skip=true clean install -U
  |--直接进入distribution/target/nacos-server-1.1.3/nacos/bin目录启动Nacos
7、Nacos集群
|-修改conf/cluster.conf
127.0.0.1:8841
127.0.0.1:8842
127.0.0.1:8843
|-可以使用Nginx作入口负载均衡。
|-问题：Nacos的持久化和集群的缺点：成本和可用性
8、注意事项
|-nacos启动久了，有些配置会无效。
9、动态配置
@Autowired
private ConfigurableApplicationContext configurableApplicationContext;
configurableApplicationContext.getEnvironment().getProperty("common.name");

